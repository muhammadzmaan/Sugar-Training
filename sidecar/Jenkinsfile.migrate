// Declarative Pipeline Syntax

pipeline {
  agent {
    kubernetes {
      defaultContainer 'karma'
      yaml """\
        apiVersion: v1
        kind: Pod
        spec:
          containers:
          - name: karma
            image: sugarcrm/ea-karma:latest
            imagePullPolicy: IfNotPresent
            tty: true
            command:
            - cat
          imagePullSecrets:
            - name: sugarcrmci-dockerhub-v1-ro-secret
      """.stripIndent().trim()
    }
  }

  stages {
    stage('Build') {
      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Build', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh 'yarn install && node_modules/gulp/bin/gulp.js'
          }
        }
      }
    }

    stage('Enforce Coding Standards') {
      when { changeRequest() }

      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Enforce Coding Standards', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh """
              FILES_TO_LINT=`git diff --name-only remotes/origin/${env.CHANGE_TARGET} HEAD | grep \'.js\$\'| xargs echo | sed \'s/ /,/g\'`
              FILES_TO_LINT=`echo \$FILES_TO_LINT | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*\$//'`
              if [ ! -z \$FILES_TO_LINT ]; then
                  node_modules/gulp/bin/gulp.js lint --files \$FILES_TO_LINT
              fi
            """
          }
        }
      }
    }

    stage('Unit Tests') {
      steps {
        container('karma') {
          gitStatusWrapper(gitHubContext: 'Unit Tests', description: 'in progress...', successDescription: 'passed', failureDescription: 'failed') {
            sh """
              node_modules/gulp/bin/gulp.js karma --ci --coverage --path="$WORKSPACE" --browsers dockerChromeHeadless
              rm -rf node_modules
              cd karma/sidecar/coverage-html/ && mv HeadlessChrome* headless-chrome
            """
          }
        }

        publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: 'karma/sidecar/coverage-html/headless-chrome',
            reportFiles: 'index.html', reportName: 'Code Coverage Report'
        ])

        junit 'karma/sidecar/test-results.xml'
      }
    }
  }
}
